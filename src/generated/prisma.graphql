# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  approvedRequests(where: VehicleRequisitionWhereInput): VehicleRequisition
  requestsInitiated(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleRequisition!]
}

type Vehicle implements Node {
  id: ID!
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  age: Int
  owner(where: VehicleOwnerWhereInput, orderBy: VehicleOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleOwner!]
}

type VehicleOwner implements Node {
  id: ID!
  name: String!
  phone: String!
  email: String!
}

type VehicleRequisition implements Node {
  id: ID!
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: String
  requestApprovedBy(where: UserWhereInput): User
  requestedBy(where: UserWhereInput): User
}


#
# Other Types
#

type AggregateUser {
  count: Int!
}

type AggregateVehicle {
  count: Int!
}

type AggregateVehicleOwner {
  count: Int!
}

type AggregateVehicleRequisition {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createVehicleOwner(data: VehicleOwnerCreateInput!): VehicleOwner!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  createVehicleRequisition(data: VehicleRequisitionCreateInput!): VehicleRequisition!
  createUser(data: UserCreateInput!): User!
  updateVehicleOwner(data: VehicleOwnerUpdateInput!, where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle
  updateVehicleRequisition(data: VehicleRequisitionUpdateInput!, where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteVehicleOwner(where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteVehicleRequisition(where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  deleteUser(where: UserWhereUniqueInput!): User
  upsertVehicleOwner(where: VehicleOwnerWhereUniqueInput!, create: VehicleOwnerCreateInput!, update: VehicleOwnerUpdateInput!): VehicleOwner!
  upsertVehicle(where: VehicleWhereUniqueInput!, create: VehicleCreateInput!, update: VehicleUpdateInput!): Vehicle!
  upsertVehicleRequisition(where: VehicleRequisitionWhereUniqueInput!, create: VehicleRequisitionCreateInput!, update: VehicleRequisitionUpdateInput!): VehicleRequisition!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyVehicleOwners(data: VehicleOwnerUpdateInput!, where: VehicleOwnerWhereInput!): BatchPayload!
  updateManyVehicles(data: VehicleUpdateInput!, where: VehicleWhereInput!): BatchPayload!
  updateManyVehicleRequisitions(data: VehicleRequisitionUpdateInput!, where: VehicleRequisitionWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyVehicleOwners(where: VehicleOwnerWhereInput!): BatchPayload!
  deleteManyVehicles(where: VehicleWhereInput!): BatchPayload!
  deleteManyVehicleRequisitions(where: VehicleRequisitionWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  vehicleOwners(where: VehicleOwnerWhereInput, orderBy: VehicleOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleOwner]!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  vehicleRequisitions(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleRequisition]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  vehicleOwner(where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehicleRequisition(where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  user(where: UserWhereUniqueInput!): User
  vehicleOwnersConnection(where: VehicleOwnerWhereInput, orderBy: VehicleOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleOwnerConnection!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!
  vehicleRequisitionsConnection(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleRequisitionConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  vehicleOwner(where: VehicleOwnerSubscriptionWhereInput): VehicleOwnerSubscriptionPayload
  vehicle(where: VehicleSubscriptionWhereInput): VehicleSubscriptionPayload
  vehicleRequisition(where: VehicleRequisitionSubscriptionWhereInput): VehicleRequisitionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  approvedRequests: VehicleRequisitionCreateOneWithoutRequestApprovedByInput
  requestsInitiated: VehicleRequisitionCreateManyWithoutRequestedByInput
}

input UserCreateOneWithoutApprovedRequestsInput {
  create: UserCreateWithoutApprovedRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRequestsInitiatedInput {
  create: UserCreateWithoutRequestsInitiatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApprovedRequestsInput {
  name: String!
  email: String!
  password: String!
  requestsInitiated: VehicleRequisitionCreateManyWithoutRequestedByInput
}

input UserCreateWithoutRequestsInitiatedInput {
  name: String!
  email: String!
  password: String!
  approvedRequests: VehicleRequisitionCreateOneWithoutRequestApprovedByInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  approvedRequests: VehicleRequisitionUpdateOneWithoutRequestApprovedByInput
  requestsInitiated: VehicleRequisitionUpdateManyWithoutRequestedByInput
}

input UserUpdateOneWithoutApprovedRequestsInput {
  create: UserCreateWithoutApprovedRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutApprovedRequestsDataInput
  upsert: UserUpsertWithoutApprovedRequestsInput
}

input UserUpdateOneWithoutRequestsInitiatedInput {
  create: UserCreateWithoutRequestsInitiatedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutRequestsInitiatedDataInput
  upsert: UserUpsertWithoutRequestsInitiatedInput
}

input UserUpdateWithoutApprovedRequestsDataInput {
  name: String
  email: String
  password: String
  requestsInitiated: VehicleRequisitionUpdateManyWithoutRequestedByInput
}

input UserUpdateWithoutRequestsInitiatedDataInput {
  name: String
  email: String
  password: String
  approvedRequests: VehicleRequisitionUpdateOneWithoutRequestApprovedByInput
}

input UserUpsertWithoutApprovedRequestsInput {
  update: UserUpdateWithoutApprovedRequestsDataInput!
  create: UserCreateWithoutApprovedRequestsInput!
}

input UserUpsertWithoutRequestsInitiatedInput {
  update: UserUpdateWithoutRequestsInitiatedDataInput!
  create: UserCreateWithoutRequestsInitiatedInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  approvedRequests: VehicleRequisitionWhereInput
  requestsInitiated_every: VehicleRequisitionWhereInput
  requestsInitiated_some: VehicleRequisitionWhereInput
  requestsInitiated_none: VehicleRequisitionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

"""
A connection to a list of items.
"""
type VehicleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VehicleEdge]!
  aggregate: AggregateVehicle!
}

input VehicleCreateInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  age: Int
  owner: VehicleOwnerCreateManyInput
}

"""
An edge in a connection.
"""
type VehicleEdge {
  """
  The item at the end of the edge.
  """
  node: Vehicle!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VehicleOrderByInput {
  id_ASC
  id_DESC
  registrationNumber_ASC
  registrationNumber_DESC
  logBookNumber_ASC
  logBookNumber_DESC
  model_ASC
  model_DESC
  fuelType_ASC
  fuelType_DESC
  insuranceValuation_ASC
  insuranceValuation_DESC
  insuranceRenewalDate_ASC
  insuranceRenewalDate_DESC
  age_ASC
  age_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

"""
A connection to a list of items.
"""
type VehicleOwnerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VehicleOwnerEdge]!
  aggregate: AggregateVehicleOwner!
}

input VehicleOwnerCreateInput {
  name: String!
  phone: String!
  email: String!
}

input VehicleOwnerCreateManyInput {
  create: [VehicleOwnerCreateInput!]
  connect: [VehicleOwnerWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type VehicleOwnerEdge {
  """
  The item at the end of the edge.
  """
  node: VehicleOwner!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VehicleOwnerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VehicleOwnerPreviousValues {
  id: ID!
  name: String!
  phone: String!
  email: String!
}

type VehicleOwnerSubscriptionPayload {
  mutation: MutationType!
  node: VehicleOwner
  updatedFields: [String!]
  previousValues: VehicleOwnerPreviousValues
}

input VehicleOwnerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleOwnerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleOwnerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleOwnerWhereInput
}

input VehicleOwnerUpdateDataInput {
  name: String
  phone: String
  email: String
}

input VehicleOwnerUpdateInput {
  name: String
  phone: String
  email: String
}

input VehicleOwnerUpdateManyInput {
  create: [VehicleOwnerCreateInput!]
  connect: [VehicleOwnerWhereUniqueInput!]
  disconnect: [VehicleOwnerWhereUniqueInput!]
  delete: [VehicleOwnerWhereUniqueInput!]
  update: [VehicleOwnerUpdateWithWhereUniqueNestedInput!]
  upsert: [VehicleOwnerUpsertWithWhereUniqueNestedInput!]
}

input VehicleOwnerUpdateWithWhereUniqueNestedInput {
  where: VehicleOwnerWhereUniqueInput!
  data: VehicleOwnerUpdateDataInput!
}

input VehicleOwnerUpsertWithWhereUniqueNestedInput {
  where: VehicleOwnerWhereUniqueInput!
  update: VehicleOwnerUpdateDataInput!
  create: VehicleOwnerCreateInput!
}

input VehicleOwnerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleOwnerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleOwnerWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  phone: String
  """
  All values that are not equal to given value.
  """
  phone_not: String
  """
  All values that are contained in given list.
  """
  phone_in: [String!]
  """
  All values that are not contained in given list.
  """
  phone_not_in: [String!]
  """
  All values less than the given value.
  """
  phone_lt: String
  """
  All values less than or equal the given value.
  """
  phone_lte: String
  """
  All values greater than the given value.
  """
  phone_gt: String
  """
  All values greater than or equal the given value.
  """
  phone_gte: String
  """
  All values containing the given string.
  """
  phone_contains: String
  """
  All values not containing the given string.
  """
  phone_not_contains: String
  """
  All values starting with the given string.
  """
  phone_starts_with: String
  """
  All values not starting with the given string.
  """
  phone_not_starts_with: String
  """
  All values ending with the given string.
  """
  phone_ends_with: String
  """
  All values not ending with the given string.
  """
  phone_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
}

input VehicleOwnerWhereUniqueInput {
  id: ID
}

type VehiclePreviousValues {
  id: ID!
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  age: Int
}

"""
A connection to a list of items.
"""
type VehicleRequisitionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VehicleRequisitionEdge]!
  aggregate: AggregateVehicleRequisition!
}

input VehicleRequisitionCreateInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: String
  requestApprovedBy: UserCreateOneWithoutApprovedRequestsInput
  requestedBy: UserCreateOneWithoutRequestsInitiatedInput
}

input VehicleRequisitionCreateManyWithoutRequestedByInput {
  create: [VehicleRequisitionCreateWithoutRequestedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
}

input VehicleRequisitionCreateOneWithoutRequestApprovedByInput {
  create: VehicleRequisitionCreateWithoutRequestApprovedByInput
  connect: VehicleRequisitionWhereUniqueInput
}

input VehicleRequisitionCreateWithoutRequestApprovedByInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: String
  requestedBy: UserCreateOneWithoutRequestsInitiatedInput
}

input VehicleRequisitionCreateWithoutRequestedByInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: String
  requestApprovedBy: UserCreateOneWithoutApprovedRequestsInput
}

"""
An edge in a connection.
"""
type VehicleRequisitionEdge {
  """
  The item at the end of the edge.
  """
  node: VehicleRequisition!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VehicleRequisitionOrderByInput {
  id_ASC
  id_DESC
  vehicleType_ASC
  vehicleType_DESC
  estimatedNoOfHours_ASC
  estimatedNoOfHours_DESC
  project_ASC
  project_DESC
  section_ASC
  section_DESC
  estimatedCost_ASC
  estimatedCost_DESC
  requestStatus_ASC
  requestStatus_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VehicleRequisitionPreviousValues {
  id: ID!
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: String
}

type VehicleRequisitionSubscriptionPayload {
  mutation: MutationType!
  node: VehicleRequisition
  updatedFields: [String!]
  previousValues: VehicleRequisitionPreviousValues
}

input VehicleRequisitionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleRequisitionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleRequisitionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleRequisitionWhereInput
}

input VehicleRequisitionUpdateInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: String
  requestApprovedBy: UserUpdateOneWithoutApprovedRequestsInput
  requestedBy: UserUpdateOneWithoutRequestsInitiatedInput
}

input VehicleRequisitionUpdateManyWithoutRequestedByInput {
  create: [VehicleRequisitionCreateWithoutRequestedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
  disconnect: [VehicleRequisitionWhereUniqueInput!]
  delete: [VehicleRequisitionWhereUniqueInput!]
  update: [VehicleRequisitionUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [VehicleRequisitionUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input VehicleRequisitionUpdateOneWithoutRequestApprovedByInput {
  create: VehicleRequisitionCreateWithoutRequestApprovedByInput
  connect: VehicleRequisitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VehicleRequisitionUpdateWithoutRequestApprovedByDataInput
  upsert: VehicleRequisitionUpsertWithoutRequestApprovedByInput
}

input VehicleRequisitionUpdateWithoutRequestApprovedByDataInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: String
  requestedBy: UserUpdateOneWithoutRequestsInitiatedInput
}

input VehicleRequisitionUpdateWithoutRequestedByDataInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: String
  requestApprovedBy: UserUpdateOneWithoutApprovedRequestsInput
}

input VehicleRequisitionUpdateWithWhereUniqueWithoutRequestedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  data: VehicleRequisitionUpdateWithoutRequestedByDataInput!
}

input VehicleRequisitionUpsertWithoutRequestApprovedByInput {
  update: VehicleRequisitionUpdateWithoutRequestApprovedByDataInput!
  create: VehicleRequisitionCreateWithoutRequestApprovedByInput!
}

input VehicleRequisitionUpsertWithWhereUniqueWithoutRequestedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  update: VehicleRequisitionUpdateWithoutRequestedByDataInput!
  create: VehicleRequisitionCreateWithoutRequestedByInput!
}

input VehicleRequisitionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleRequisitionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleRequisitionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  vehicleType: String
  """
  All values that are not equal to given value.
  """
  vehicleType_not: String
  """
  All values that are contained in given list.
  """
  vehicleType_in: [String!]
  """
  All values that are not contained in given list.
  """
  vehicleType_not_in: [String!]
  """
  All values less than the given value.
  """
  vehicleType_lt: String
  """
  All values less than or equal the given value.
  """
  vehicleType_lte: String
  """
  All values greater than the given value.
  """
  vehicleType_gt: String
  """
  All values greater than or equal the given value.
  """
  vehicleType_gte: String
  """
  All values containing the given string.
  """
  vehicleType_contains: String
  """
  All values not containing the given string.
  """
  vehicleType_not_contains: String
  """
  All values starting with the given string.
  """
  vehicleType_starts_with: String
  """
  All values not starting with the given string.
  """
  vehicleType_not_starts_with: String
  """
  All values ending with the given string.
  """
  vehicleType_ends_with: String
  """
  All values not ending with the given string.
  """
  vehicleType_not_ends_with: String
  estimatedNoOfHours: Int
  """
  All values that are not equal to given value.
  """
  estimatedNoOfHours_not: Int
  """
  All values that are contained in given list.
  """
  estimatedNoOfHours_in: [Int!]
  """
  All values that are not contained in given list.
  """
  estimatedNoOfHours_not_in: [Int!]
  """
  All values less than the given value.
  """
  estimatedNoOfHours_lt: Int
  """
  All values less than or equal the given value.
  """
  estimatedNoOfHours_lte: Int
  """
  All values greater than the given value.
  """
  estimatedNoOfHours_gt: Int
  """
  All values greater than or equal the given value.
  """
  estimatedNoOfHours_gte: Int
  project: String
  """
  All values that are not equal to given value.
  """
  project_not: String
  """
  All values that are contained in given list.
  """
  project_in: [String!]
  """
  All values that are not contained in given list.
  """
  project_not_in: [String!]
  """
  All values less than the given value.
  """
  project_lt: String
  """
  All values less than or equal the given value.
  """
  project_lte: String
  """
  All values greater than the given value.
  """
  project_gt: String
  """
  All values greater than or equal the given value.
  """
  project_gte: String
  """
  All values containing the given string.
  """
  project_contains: String
  """
  All values not containing the given string.
  """
  project_not_contains: String
  """
  All values starting with the given string.
  """
  project_starts_with: String
  """
  All values not starting with the given string.
  """
  project_not_starts_with: String
  """
  All values ending with the given string.
  """
  project_ends_with: String
  """
  All values not ending with the given string.
  """
  project_not_ends_with: String
  section: String
  """
  All values that are not equal to given value.
  """
  section_not: String
  """
  All values that are contained in given list.
  """
  section_in: [String!]
  """
  All values that are not contained in given list.
  """
  section_not_in: [String!]
  """
  All values less than the given value.
  """
  section_lt: String
  """
  All values less than or equal the given value.
  """
  section_lte: String
  """
  All values greater than the given value.
  """
  section_gt: String
  """
  All values greater than or equal the given value.
  """
  section_gte: String
  """
  All values containing the given string.
  """
  section_contains: String
  """
  All values not containing the given string.
  """
  section_not_contains: String
  """
  All values starting with the given string.
  """
  section_starts_with: String
  """
  All values not starting with the given string.
  """
  section_not_starts_with: String
  """
  All values ending with the given string.
  """
  section_ends_with: String
  """
  All values not ending with the given string.
  """
  section_not_ends_with: String
  estimatedCost: Int
  """
  All values that are not equal to given value.
  """
  estimatedCost_not: Int
  """
  All values that are contained in given list.
  """
  estimatedCost_in: [Int!]
  """
  All values that are not contained in given list.
  """
  estimatedCost_not_in: [Int!]
  """
  All values less than the given value.
  """
  estimatedCost_lt: Int
  """
  All values less than or equal the given value.
  """
  estimatedCost_lte: Int
  """
  All values greater than the given value.
  """
  estimatedCost_gt: Int
  """
  All values greater than or equal the given value.
  """
  estimatedCost_gte: Int
  requestStatus: String
  """
  All values that are not equal to given value.
  """
  requestStatus_not: String
  """
  All values that are contained in given list.
  """
  requestStatus_in: [String!]
  """
  All values that are not contained in given list.
  """
  requestStatus_not_in: [String!]
  """
  All values less than the given value.
  """
  requestStatus_lt: String
  """
  All values less than or equal the given value.
  """
  requestStatus_lte: String
  """
  All values greater than the given value.
  """
  requestStatus_gt: String
  """
  All values greater than or equal the given value.
  """
  requestStatus_gte: String
  """
  All values containing the given string.
  """
  requestStatus_contains: String
  """
  All values not containing the given string.
  """
  requestStatus_not_contains: String
  """
  All values starting with the given string.
  """
  requestStatus_starts_with: String
  """
  All values not starting with the given string.
  """
  requestStatus_not_starts_with: String
  """
  All values ending with the given string.
  """
  requestStatus_ends_with: String
  """
  All values not ending with the given string.
  """
  requestStatus_not_ends_with: String
  requestApprovedBy: UserWhereInput
  requestedBy: UserWhereInput
}

input VehicleRequisitionWhereUniqueInput {
  id: ID
}

type VehicleSubscriptionPayload {
  mutation: MutationType!
  node: Vehicle
  updatedFields: [String!]
  previousValues: VehiclePreviousValues
}

input VehicleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleWhereInput
}

input VehicleUpdateInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  age: Int
  owner: VehicleOwnerUpdateManyInput
}

input VehicleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VehicleWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VehicleWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  registrationNumber: String
  """
  All values that are not equal to given value.
  """
  registrationNumber_not: String
  """
  All values that are contained in given list.
  """
  registrationNumber_in: [String!]
  """
  All values that are not contained in given list.
  """
  registrationNumber_not_in: [String!]
  """
  All values less than the given value.
  """
  registrationNumber_lt: String
  """
  All values less than or equal the given value.
  """
  registrationNumber_lte: String
  """
  All values greater than the given value.
  """
  registrationNumber_gt: String
  """
  All values greater than or equal the given value.
  """
  registrationNumber_gte: String
  """
  All values containing the given string.
  """
  registrationNumber_contains: String
  """
  All values not containing the given string.
  """
  registrationNumber_not_contains: String
  """
  All values starting with the given string.
  """
  registrationNumber_starts_with: String
  """
  All values not starting with the given string.
  """
  registrationNumber_not_starts_with: String
  """
  All values ending with the given string.
  """
  registrationNumber_ends_with: String
  """
  All values not ending with the given string.
  """
  registrationNumber_not_ends_with: String
  logBookNumber: String
  """
  All values that are not equal to given value.
  """
  logBookNumber_not: String
  """
  All values that are contained in given list.
  """
  logBookNumber_in: [String!]
  """
  All values that are not contained in given list.
  """
  logBookNumber_not_in: [String!]
  """
  All values less than the given value.
  """
  logBookNumber_lt: String
  """
  All values less than or equal the given value.
  """
  logBookNumber_lte: String
  """
  All values greater than the given value.
  """
  logBookNumber_gt: String
  """
  All values greater than or equal the given value.
  """
  logBookNumber_gte: String
  """
  All values containing the given string.
  """
  logBookNumber_contains: String
  """
  All values not containing the given string.
  """
  logBookNumber_not_contains: String
  """
  All values starting with the given string.
  """
  logBookNumber_starts_with: String
  """
  All values not starting with the given string.
  """
  logBookNumber_not_starts_with: String
  """
  All values ending with the given string.
  """
  logBookNumber_ends_with: String
  """
  All values not ending with the given string.
  """
  logBookNumber_not_ends_with: String
  model: String
  """
  All values that are not equal to given value.
  """
  model_not: String
  """
  All values that are contained in given list.
  """
  model_in: [String!]
  """
  All values that are not contained in given list.
  """
  model_not_in: [String!]
  """
  All values less than the given value.
  """
  model_lt: String
  """
  All values less than or equal the given value.
  """
  model_lte: String
  """
  All values greater than the given value.
  """
  model_gt: String
  """
  All values greater than or equal the given value.
  """
  model_gte: String
  """
  All values containing the given string.
  """
  model_contains: String
  """
  All values not containing the given string.
  """
  model_not_contains: String
  """
  All values starting with the given string.
  """
  model_starts_with: String
  """
  All values not starting with the given string.
  """
  model_not_starts_with: String
  """
  All values ending with the given string.
  """
  model_ends_with: String
  """
  All values not ending with the given string.
  """
  model_not_ends_with: String
  fuelType: String
  """
  All values that are not equal to given value.
  """
  fuelType_not: String
  """
  All values that are contained in given list.
  """
  fuelType_in: [String!]
  """
  All values that are not contained in given list.
  """
  fuelType_not_in: [String!]
  """
  All values less than the given value.
  """
  fuelType_lt: String
  """
  All values less than or equal the given value.
  """
  fuelType_lte: String
  """
  All values greater than the given value.
  """
  fuelType_gt: String
  """
  All values greater than or equal the given value.
  """
  fuelType_gte: String
  """
  All values containing the given string.
  """
  fuelType_contains: String
  """
  All values not containing the given string.
  """
  fuelType_not_contains: String
  """
  All values starting with the given string.
  """
  fuelType_starts_with: String
  """
  All values not starting with the given string.
  """
  fuelType_not_starts_with: String
  """
  All values ending with the given string.
  """
  fuelType_ends_with: String
  """
  All values not ending with the given string.
  """
  fuelType_not_ends_with: String
  insuranceValuation: Int
  """
  All values that are not equal to given value.
  """
  insuranceValuation_not: Int
  """
  All values that are contained in given list.
  """
  insuranceValuation_in: [Int!]
  """
  All values that are not contained in given list.
  """
  insuranceValuation_not_in: [Int!]
  """
  All values less than the given value.
  """
  insuranceValuation_lt: Int
  """
  All values less than or equal the given value.
  """
  insuranceValuation_lte: Int
  """
  All values greater than the given value.
  """
  insuranceValuation_gt: Int
  """
  All values greater than or equal the given value.
  """
  insuranceValuation_gte: Int
  insuranceRenewalDate: DateTime
  """
  All values that are not equal to given value.
  """
  insuranceRenewalDate_not: DateTime
  """
  All values that are contained in given list.
  """
  insuranceRenewalDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  insuranceRenewalDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  insuranceRenewalDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  insuranceRenewalDate_lte: DateTime
  """
  All values greater than the given value.
  """
  insuranceRenewalDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  insuranceRenewalDate_gte: DateTime
  age: Int
  """
  All values that are not equal to given value.
  """
  age_not: Int
  """
  All values that are contained in given list.
  """
  age_in: [Int!]
  """
  All values that are not contained in given list.
  """
  age_not_in: [Int!]
  """
  All values less than the given value.
  """
  age_lt: Int
  """
  All values less than or equal the given value.
  """
  age_lte: Int
  """
  All values greater than the given value.
  """
  age_gt: Int
  """
  All values greater than or equal the given value.
  """
  age_gte: Int
  owner_every: VehicleOwnerWhereInput
  owner_some: VehicleOwnerWhereInput
  owner_none: VehicleOwnerWhereInput
}

input VehicleWhereUniqueInput {
  id: ID
  registrationNumber: String
  logBookNumber: String
}
